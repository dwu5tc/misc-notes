- object relational database management system
- key features
	- sql:2011 standard
	- ACID compliant
	- indexes
	- views, triggers, procedures, functions
	- relationships
	- multiversion concurrency control 
	- sql:2008 datatypes
		- integer, numeric, boolean, char, varchar, date, interval, timestamp
	- native programming interface

- pg_restore -U postgres -d dvdrental C:\dvdrental.tar

- COPY actor TO 'C:\actor.csv' DELIMITER ',' CSV;

- list unique first name along with the count of occurrence from actor table
	SELECT first_name, COUNT(first_name)
	FROM Actor
	WHERE actor_id BETWEEN 100 and 200
	GROUP BY first_name

- to filter down grouped/aggregated result set, cannot use WHERE, must use HAVING
- list all the first names which occur more than 1 time
	SELECT first_name, COUNT(first_name)
	FROM Actor
	WHERE actor_id BETWEEN 100 and 200
	GROUP BY first_name
	HAVING COUNT(first_name) > 1

- e.g
	CREATE TABLE actor
	(
		actor_id integer NOT NULL DEFAULT nextval('actor_actor_id_seq'::regclass),
		first_name character varying(45) NOT NULL,
		last_name character varying(45) NOT NULL,
		last_update timestamp without time zone NOT NULL DEFAULT now(),
		CONSTRAINT actor_pkey PRIMARY KEY (actor_id)
	)
		- actor_id value generated from sequence every time a new row is inserted in the table
		- first_name and last_name are strings up to 45 char long
		- last_update has DEFAULT value now --> every time a record = inserted, this col is auto updated with current timestamp
		- actor_id and last_update are autopopulated

- inner join returns rows when there is at least one match in both the tables
- retrieve all the students who have signed up for classes
	SELECT st.StudentName, cl.ClassName
	FROM StudentClass sc
	INNER JOIN Students st ON st.StudentID = sc.StudentID
	INNER JOIN Classes cl ON cl.ClassID = sc.ClassID;

	- Student table contains studentid and studentname
	- Class table contains contains classid and classname
	- StudentClass table contains studentid and classid

- left outer join returns all the rows from the left table with the matching rows from the right table
- if no columns matching in the right table, it returns NULL values
- retrieve all students who have signed up for NO classes
	SELECT st.StudentName
	FROM Students st
	LEFT JOIN StudentClass sc ON st.StudentID = sc.StudentID
	LEFT JOIN Classes cl ON cl.ClassID = sc.ClassID
	WHERE cl.ClassName is NULL;
- alternate solution
	SELECT st.StudentName
	FROM Students st
	LEFT JOIN StudentClass sc ON st.StudentID = sc.StudentID
	WHERE sc.ClassID is NULL;

- right outer join returns all the rows from the right table with the matching rows from the left table
- if there are no columns matching in the left table, it returns NULL values
- retrieve all the classes not signed up by any students 
	SELECT cl.ClassName
	FROM Students st
	RIGHT JOIN StudentClass sc ON st.StudentID = sc.StudentID
	RIGHT JOIN Classes cl ON cl.ClassID = sc.ClassID
	WHERE st.StudentID is NULL;

- check maximum capicity of classes (assign all students to each class)
- cross/cartesian join
	SELECT st.StudentName, cl.ClassName
	FROM Classes cl
	CROSS JOIN Students st;

	- with 4 student and 4 classes, returns 16 rows

- full outer join
- retrieve list of enrolled students + students who did not sign up for any classes + classes not signed up by any students
- returns rows from either table when conditions are met and returns NULL value when there is no match